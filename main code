import tkinter
from tkinter import ttk
from tkinter import Tk, Button, Label
from tkinter import messagebox
from tkinter import *
from tkcalendar import Calendar
import calendar
from datetime import datetime
import csv
import matplotlib.pyplot as plt
import random



class Appointment():
    REGULAR_CUSTOMER_DISCOUNT = 5

    def __init__(self):
        self.cleanup()

    def cleanup(self):
        self.phone = ''
        self.name = ''
        self.date = ''
        self.reminder = False
        self.haircut_type = ''
        self.haircut_price = 0
        self.manicure_type = ''
        self.manicure_price = 0
        self.facial_type = ''
        self.facial_price = 0
        self.massage_type = ''
        self.massage_price = 0
        self.is_regular_customer = False
        self.additional_discount = 0
        self.total_price = 0

    def set_haircut_type(self, type):
        self.haircut_type = type

    def set_haircut_price(self, price):
        self.haircut_price = price
        self.calculate_total()

    def set_manicure_type(self, type):
        self.manicure_type = type

    def set_manicure_price(self, price):
        self.manicure_price = price
        self.calculate_total()

    def set_facial_type(self, type):
        self.facial_type = type

    def set_facial_price(self, price):
        self.facial_price = price
        self.calculate_total()

    def set_massage_type(self, type):
        self.massage_type = type

    def set_massage_price(self, price):
        self.massage_price = price
        self.calculate_total()

    def set_is_regular_customer(self, is_regular):
        self.is_regular_customer = is_regular
        self.calculate_total()

    def set_additional_discount(self, discount):
        self.additional_discount = discount
        self.calculate_total()


    def calculate_total(self):
        total = (self.haircut_price +
                 self.manicure_price +
                 self.facial_price +
                 self.massage_price)

        if self.is_regular_customer:
            factor = Appointment.REGULAR_CUSTOMER_DISCOUNT / 100
            total *= (1 - factor)

        if self.additional_discount > 0:
            factor = self.additional_discount / 100
            total *= (1 - factor)

        self.total_price = round(total, 2)
        return total


DATA_FILE_NAME = 'Appointments.csv'
current_appointment = Appointment()

def save_appointment(appointment):
    with open(DATA_FILE_NAME, 'a') as dataFile:
        writer_csv = csv.writer(dataFile)
        writer_csv.writerow([
            appointment.phone,
            appointment.name,
            appointment.date,
            appointment.reminder,
            appointment.haircut_type,
            appointment.haircut_price,
            appointment.manicure_type,
            appointment.manicure_price,
            appointment.facial_type,
            appointment.facial_price,
            appointment.massage_type,
            appointment.massage_price,
            appointment.is_regular_customer,
            appointment.additional_discount,
            appointment.total_price
        ])


def get_appointment():
    appointment = Appointment()
    appointment.phone = userTelephoneTxt.get()
    appointment.name = userNameTxt.get()
    appointment.date = userDateAppointmentTxt.get()
    appointment.reminder = userRemindercombo.get()
    appointment.haircut_type = serviceHairTypeCombo.get()
    appointment.haircut_price = serviceHairPriceCombo.get()
    appointment.manicure_type = serviceManicureTypeCombo.get()
    appointment.manicure_price = serviceManicurePriceCombo.get()
    appointment.facial_type = serviceFacialTypeCombo.get()
    appointment.facial_price = serviceFacialPriceCombo.get()
    appointment.massage_type = serviceMassageTypeCombo.get()
    appointment.massage_price = serviceMassagePriceCombo.get()
    appointment.discount = userDiscountCombo.get()
    return appointment

def is_appointment_valid():
    if current_appointment.name == "" or current_appointment.phone == "":
        messagebox.showerror("Error", "Customer Details are required")
        return False

    if (current_appointment.haircut_type == "" and
            current_appointment.facial_type == "" and
            current_appointment.manicure_type == "" and
            current_appointment.massage_type == ""):
        messagebox.showerror("Error", "No services are selected")
        return False

    if (current_appointment.haircut_price == 0 and
            current_appointment.manicure_price == 0 and
            current_appointment.facial_price == 0 and
            current_appointment.massage_price == 0):
        messagebox.showerror("Error", "No prices are selected")
        return False
    return True

def save_button():
    print('save_button')
    if not is_appointment_valid():
        return
    save_appointment(current_appointment)
    current_appointment.cleanup()
    print('Appointment is saved')


def onPrintCheckClicked():
    print('onPrintCheckClicked')

    global current_appointment

    if not is_appointment_valid():
        return

    billnumber = random.randint(1000, 9999)

    receipt_text = "\t**Welcome to Beauty Salon**\n\n"
    receipt_text += f"\tBill Number: {billnumber}\n"
    receipt_text += f"\tCustomer: {current_appointment.name}\n"

    receipt_text += f"\t=======================================\n"
    receipt_text += f"\tServices:\n"
    if (current_appointment.haircut_type != ""):
        receipt_text += f"\t  Haircut: {current_appointment.haircut_price}\n"
    if (current_appointment.manicure_type != ""):
        receipt_text += f"\t Manicure: {current_appointment.manicure_price}\n"
    if (current_appointment.facial_type != ""):
        receipt_text += f"\t Facial: {current_appointment.facial_price}\n"
    if (current_appointment.massage_type != ""):
        receipt_text += f"\t Massage: {current_appointment.massage_price}\n"

    if current_appointment.is_regular_customer is True or current_appointment.additional_discount != 0:
        receipt_text += f"\t=======================================\n"
        if current_appointment.is_regular_customer:
            receipt_text += f"\tRegular Customer(%): {Appointment.REGULAR_CUSTOMER_DISCOUNT}\n"
        if current_appointment.additional_discount != 0:
            receipt_text += f"\t Additional Discount(%): {current_appointment.additional_discount}\n"

    receipt_text += f"\t=======================================\n"
    receipt_text += f"\tTotal price: {current_appointment.total_price}\n"
    messagebox.showinfo("Receipt", receipt_text)

def configureWidgetState(widget, state):
    widget.configure(state= 'enabled' if state else 'disabled')

def onUserNameChange(var, index, mode):
    global userNameVar
    global current_appointment
    current_appointment.name = userNameVar.get()

def onTelephoneChange(var, index, mode):
    global userTelephoneVar
    global current_appointment
    current_appointment.phone = userTelephoneVar.get()

def onServiceHaircutCheckChange():
    val = serviceHaircutCheckValue.get()
    configureWidgetState(serviceHairTypeCombo, val)
    configureWidgetState(serviceHairPriceCombo, val)

def onServiceHaircutTypeChange(event):
    global current_appointment
    global userTotalPriceAmount
    value = serviceHairTypeCombo.get()
    current_appointment.set_haircut_type(value)

def onServiceHaircutPriceChange(event):
    global current_appointment
    value = serviceHairPriceCombo.get()
    current_appointment.set_haircut_price(float(value))
    userTotalPriceAmount.config(text = str(current_appointment.total_price))


def onServiceManicureCheckChange():
    val = serviceManicureCheckValue.get()
    configureWidgetState(serviceManicureTypeCombo, val)
    configureWidgetState(serviceManicurePriceCombo, val)

def onServiceManicureTypeChange(event):
    global current_appointment
    global userTotalPriceAmount
    value = serviceManicureTypeCombo.get()
    current_appointment.set_manicure_type(value)

def onServiceManicurePriceChange(event):
    global current_appointment
    global userTotalPriceAmount
    value = serviceManicurePriceCombo.get()
    current_appointment.set_manicure_price(float(value))
    userTotalPriceAmount.config(text = str(current_appointment.total_price))

def onServiceFacialCheckChange():
    val = serviceFacialCheckValue.get()
    configureWidgetState(serviceFacialTypeCombo, val)
    configureWidgetState(serviceFacialPriceCombo, val)

def onServiceFacialTypeChange(event):
    global current_appointment
    global userTotalPriceAmount
    print('onServiceFacialTypeChange')
    value = serviceFacialTypeCombo.get()
    current_appointment.set_facial_type(value)

def onServiceFacialPriceChange(event):
    global current_appointment
    global userTotalPriceAmount
    print('onServiceFacialPriceChange')
    value = serviceFacialPriceCombo.get()
    current_appointment.set_facial_price(float(value))
    userTotalPriceAmount.config(text = str(current_appointment.total_price))
def onServiceMassageCheckChange():
    val = serviceMassageCheckValue.get()
    configureWidgetState(serviceMassageTypeCombo, val)
    configureWidgetState(serviceMassagePriceCombo, val)

def onServiceMassageTypeChange(event):
    global current_appointment
    global userTotalPriceAmount
    print('onServiceMassageTypeChange')
    value = serviceMassageTypeCombo.get()
    current_appointment.set_massage_type(value)

def onServiceMassagePriceChange(event):
    global current_appointment
    global userTotalPriceAmount
    print('onServiceMassagePriceChange')
    value = serviceMassagePriceCombo.get()
    current_appointment.set_massage_price(float(value))
    userTotalPriceAmount.config(text = str(current_appointment.total_price))
def onRegularCustomerCheckChange():
    global current_appointment
    val = userRegularValue.get()
    current_appointment.set_is_regular_customer(val)
    userTotalPriceAmount.config(text=str(current_appointment.total_price))

def onServiceAdditionalDiscountChange(event):
    global current_appointment
    global userDiscountCombo
    value = float(userDiscountCombo.get())
    current_appointment.set_additional_discount(value)
    userTotalPriceAmount.config(text=str(current_appointment.total_price))


window = tkinter.Tk()
window.title('BEAUTY SALON')

frame = tkinter.Frame(window)
frame.pack()

# State variables
serviceMassageCheckValue = tkinter.BooleanVar()
serviceHaircutCheckValue = tkinter.BooleanVar()
serviceFacialCheckValue = tkinter.BooleanVar()
serviceManicureCheckValue = tkinter.BooleanVar()
userRegularValue = tkinter.BooleanVar()


openFrameworks = tkinter.LabelFrame(frame, highlightcolor='green', background= 'pink', text='Customer details')
openFrameworks.grid(row=0, column=0)

userNameLabel = tkinter.Label(openFrameworks, text='Customer')
userNameLabel.grid(row=1, column=0, pady=15)

userNameVar = StringVar()
userNameVar.trace_add('write', onUserNameChange)
userNameTxt = tkinter.Entry(openFrameworks, textvariable=userNameVar)
userNameTxt.grid(row=1, column=1, pady=15)

userTelephoneLabel = tkinter.Label(openFrameworks, text='Telephone No: ')
userTelephoneLabel.grid(row=1, column=2, pady=15)

userTelephoneVar = StringVar()
userTelephoneVar.trace_add('write', onTelephoneChange)
userTelephoneTxt = tkinter.Entry(openFrameworks, textvariable=userTelephoneVar)
userTelephoneTxt.grid(row=1, column=3, pady=15)

userDateAppointmentLabel = tkinter.Label(openFrameworks, text='Appointment: ')
userDateAppointmentLabel.grid(row=2, column=0, pady=15)

userDateAppointmentTxt = tkinter.Entry(openFrameworks)
userDateAppointmentTxt.grid(row=2, column=1, pady=15)
userDateAppointmentTxt.insert(0, 'mm/dd/yyyy')

userRemiderLabel = tkinter.Label(openFrameworks, text='Remind: ')
userRemiderLabel.grid(row=2, column=2, pady=15)

userRemindercombo = ttk.Combobox(openFrameworks, values=['Yes', 'No'])
userRemindercombo.grid(row=2, column=3, pady=15, padx=10)

openSecondFrameworks = tkinter.LabelFrame(frame, fg='red', background= 'pink', text='Services: ')
openSecondFrameworks.grid(row=1, column=0)

# Haircut section
serviceHaircutCheck = ttk.Checkbutton(
    openSecondFrameworks,
    variable=serviceHaircutCheckValue,
    command=onServiceHaircutCheckChange,
    text='Haircut')
serviceHaircutCheck.grid(row=0, column=0, padx=(10, 0), pady=15)

serviceHairTypeLabel = tkinter.Label(openSecondFrameworks, text='Type: ')
serviceHairTypeLabel.grid(row=0, column=1, pady=15)

# state='readonly'
serviceHairTypeCombo = ttk.Combobox(
    openSecondFrameworks,
    values=['Long', 'Middle', 'Short'],
    state='disabled')
serviceHairTypeCombo.bind("<<ComboboxSelected>>", onServiceHaircutTypeChange)
serviceHairTypeCombo.grid(row=0, column=2, pady=15)

serviceHairPriceLabel = tkinter.Label(openSecondFrameworks, text='Price: ')
serviceHairPriceLabel.grid(row=0, column=3, pady=15)

serviceHairPriceCombo = ttk.Combobox(
    openSecondFrameworks,
    values=[45.00, 35.00, 30.00],
    state='disabled')
serviceHairPriceCombo.bind("<<ComboboxSelected>>", onServiceHaircutPriceChange)
serviceHairPriceCombo.grid(row=0, column=4, pady=15, padx=10)

# Manicure section
serviceManicureCheck = ttk.Checkbutton(
    openSecondFrameworks,
    variable=serviceManicureCheckValue,
    command=onServiceManicureCheckChange,
    text='Manicure')
serviceManicureCheck.grid(row=1, column=0, padx=(10, 0), pady=15)

serviceManicureTypeLabel = tkinter.Label(openSecondFrameworks, text='Type: ')
serviceManicureTypeLabel.grid(row=1, column=1)

serviceManicureTypeCombo = ttk.Combobox(
    openSecondFrameworks,
    values=['French', 'Classic', 'Gel', 'Basic', 'Gel/Decor'],
    state='disabled')
serviceManicureTypeCombo.bind("<<ComboboxSelected>>", onServiceManicureTypeChange)
serviceManicureTypeCombo.grid(row=1, column=2)

serviceManicurePriceLabel = tkinter.Label(openSecondFrameworks, text='Price: ')
serviceManicurePriceLabel.grid(row=1, column=3)

serviceManicurePriceCombo = ttk.Combobox(
    openSecondFrameworks,
    values=[45.00, 30.00, 55.00, 25, 85],
    state='disabled')
serviceManicurePriceCombo.bind("<<ComboboxSelected>>", onServiceManicurePriceChange)
serviceManicurePriceCombo.grid(row=1, column=4, pady=15, padx=10)

# Facial section
serviceFacialCheck = ttk.Checkbutton(
    openSecondFrameworks,
    variable=serviceFacialCheckValue,
    command=onServiceFacialCheckChange,
    text='Facial')
serviceFacialCheck.grid(row=2, column=0, padx=(10, 0), pady=15)

serviceFacialTypeLabel = tkinter.Label(openSecondFrameworks, text='Type: ')
serviceFacialTypeLabel.grid(row=2, column=1)

serviceFacialTypeCombo = ttk.Combobox(
    openSecondFrameworks,
    values=['Oil skin', 'Anti-age', 'R-lifting', 'Spa day', 'Peeling'],
    state='disabled')
serviceFacialTypeCombo.bind("<<ComboboxSelected>>", onServiceFacialTypeChange)
serviceFacialTypeCombo.grid(row=2, column=2)

serviceFacialPriceLabel = tkinter.Label(openSecondFrameworks, text='Price: ')
serviceFacialPriceLabel.grid(row=2, column=3)

serviceFacialPriceCombo = ttk.Combobox(
    openSecondFrameworks,
    values=[125.00, 150.00, 148.00, 225.00, 85.00],
    state='disabled')
serviceFacialPriceCombo.bind("<<ComboboxSelected>>", onServiceFacialPriceChange)
serviceFacialPriceCombo.grid(row=2, column=4, pady=15, padx=10)

# Massage section
serviceMassageCheck = ttk.Checkbutton(
    openSecondFrameworks,
    variable=serviceMassageCheckValue,
    command=onServiceMassageCheckChange,
    text='Massage')
serviceMassageCheck.grid(row=3, column=0, padx=(10, 0), pady=15)

serviceMassageTypeLabel = tkinter.Label(openSecondFrameworks, text='Type: ')
serviceMassageTypeLabel.grid(row=3, column=1)

serviceMassageTypeCombo = ttk.Combobox(
    openSecondFrameworks,
    values=['Full body', 'Thai', 'Hot stones', 'Chinese', 'Spa with body wrap'],
    state='disabled')
serviceMassageTypeCombo.bind("<<ComboboxSelected>>", onServiceMassageTypeChange)
serviceMassageTypeCombo.grid(row=3, column=2)

serviceMassagePriceLabel = tkinter.Label(openSecondFrameworks, text='Price: ')
serviceMassagePriceLabel.grid(row=3, column=3)

serviceMassagePriceCombo = ttk.Combobox(
    openSecondFrameworks,
    values=[85.00, 50.00, 48.00, 55.00, 85.00],
    state='disabled')
serviceMassagePriceCombo.bind("<<ComboboxSelected>>", onServiceMassagePriceChange)
serviceMassagePriceCombo.grid(row=3, column=4, padx=(10, 0), pady=15)



openThirdFrameworks = tkinter.LabelFrame(frame, fg='green', background= 'pink', width= 250,  text='Final info: ')
openThirdFrameworks.grid(row=2, column=0, padx = 70)

userDiscountLabel = tkinter.Label(openThirdFrameworks, text='Additional Discount (%): ')
userDiscountLabel.grid(row=2, column=0)

userDiscountCombo = ttk.Combobox(openThirdFrameworks, values=[5, 10, 15])
userDiscountCombo.bind("<<ComboboxSelected>>", onServiceAdditionalDiscountChange)
userDiscountCombo.grid(row=2, column=1, pady = 5, padx = (0, 10))

userRegularCheck = ttk.Checkbutton(
    openThirdFrameworks,
    variable=userRegularValue,
    command=onRegularCustomerCheckChange,
    text='Regular customer')
userRegularCheck.grid(row=1, column=0, padx=(0, 10), pady=15)


userTotalPriceLabel = tkinter.Label(openThirdFrameworks, text='Total price: ')
userTotalPriceLabel.grid(row=3, column=0, pady = 7)

userTotalPriceAmount = tkinter.Label(openThirdFrameworks)
userTotalPriceAmount.grid(row = 3, column = 1, pady = 7,)

saveButton = tkinter.Button(frame, text='Save', command=save_button)
saveButton.grid(row=5, column=0)

printCheckButton = tkinter.Button(frame, text='Print check', activebackground='red', command=onPrintCheckClicked)
printCheckButton.grid(row=6, column=0)

window.mainloop()

